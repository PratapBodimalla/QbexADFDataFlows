{
	"name": "df_source_sink_001",
	"properties": {
		"folder": {
			"name": "2.DataFlowTransformations"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_source_csv",
						"type": "DatasetReference"
					},
					"name": "sourceCSV"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_sink_csv",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"parameters{",
				"     test_param as string ('001')",
				"}",
				"source(output(",
				"          SalesOrder as string,",
				"          OrderDate as string,",
				"          CustomerName as string,",
				"          City as string,",
				"          Country as string,",
				"          Product as string,",
				"          Price as string,",
				"          Qty_Sold as string,",
				"          Qty_Sold_Units as string,",
				"          Amount as string,",
				"          Amount_Currency as string,",
				"          ShipDate as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> sourceCSV",
				"sourceCSV derive(year = toString(year(toDate(OrderDate,'dd-MM-yyyy'))),",
				"          filename = 'sales_data_' + toString(year(toDate(OrderDate,'dd-MM-yyyy')))) ~> derivedColumn1",
				"derivedColumn1 select(mapColumn(",
				"          SalesOrder,",
				"          OrderDate,",
				"          CustomerName,",
				"          City,",
				"          Country,",
				"          Product,",
				"          Price,",
				"          Qty_Sold,",
				"          Qty_Sold_Units,",
				"          Amount,",
				"          Amount_Currency,",
				"          ShipDate,",
				"          year,",
				"          filename",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}