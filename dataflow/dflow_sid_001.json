{
	"name": "dflow_sid_001",
	"properties": {
		"folder": {
			"name": "SurrogateKey"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "ls_sql_db",
						"type": "LinkedServiceReference"
					},
					"name": "source1"
				},
				{
					"linkedService": {
						"referenceName": "ls_blob_qbexblobstoragedemofiles",
						"type": "LinkedServiceReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"name": "sink1"
				},
				{
					"linkedService": {
						"referenceName": "ls_sql_db",
						"type": "LinkedServiceReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "surrogateKey2"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          student_id as string,",
				"          max_id as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'query',",
				"     store: 'sqlserver',",
				"     query: 'select \\'max_id\\' student_id,COALESCE(max(StudentID),0) max_id\\nfrom dbo.Student_sid',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> source1",
				"source(output(",
				"          StudentName as string,",
				"          City as string,",
				"          Country as string,",
				"          Age as short,",
				"          Email as string",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     container: 'dataflow-functions',",
				"     fileName: 'student_sid_001.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> source2",
				"source2 keyGenerate(output(StudentID as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey2",
				"surrogateKey2 derive(StudentID = StudentID + toInteger(sink1#lookup('max_id').max_id)) ~> derivedColumn1",
				"source1 sink(validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     keys:['student_id'],",
				"     store: 'cache',",
				"     format: 'inline',",
				"     output: false,",
				"     saveOrder: 0) ~> sink1",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'dbo',",
				"     tableName: 'Student_sid',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink2"
			]
		}
	}
}