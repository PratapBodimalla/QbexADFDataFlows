{
	"name": "df_select",
	"properties": {
		"folder": {
			"name": "1.DataFlowTransformations"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_select_1_sales_orders",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "ds_select_2_sales_orders",
						"type": "DatasetReference"
					},
					"name": "source2"
				},
				{
					"dataset": {
						"referenceName": "ds_select_5_student_marks_data",
						"type": "DatasetReference"
					},
					"name": "source3"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_adls_folder",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "ds_adls_folder",
						"type": "DatasetReference"
					},
					"name": "sink2"
				},
				{
					"dataset": {
						"referenceName": "ds_adls_folder",
						"type": "DatasetReference"
					},
					"name": "sink3"
				}
			],
			"transformations": [
				{
					"name": "select1"
				},
				{
					"name": "cast1"
				},
				{
					"name": "select2"
				},
				{
					"name": "cast2"
				},
				{
					"name": "select3"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          SalesOrder as string,",
				"          OrderDate as string,",
				"          CustomerName as string,",
				"          City as string,",
				"          Country as string,",
				"          Product as string,",
				"          Price as string,",
				"          Qty_Sold as string,",
				"          Qty_Sold_Units as string,",
				"          Amount as string,",
				"          Amount_Currency as string,",
				"          ShipDate as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          SalesOrder as string,",
				"          OrderDate as string,",
				"          Product as string,",
				"          sold_to_party as (CustomerName as string, address as (City as string, Country as string)),",
				"          sales_amount as (Amount as integer, Currency as string),",
				"          sales_quantities as (Qty_Sold as integer, Qty_Sold_Units as string)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'arrayOfDocuments') ~> source2",
				"source(output(",
				"          school as string,",
				"          class as string,",
				"          {student id} as string,",
				"          student_name as string,",
				"          subject_1_written_marks as string,",
				"          subject_2_written_marks as string,",
				"          subject_3_written_marks as string,",
				"          subject_4_written_marks as string,",
				"          subject_5_written_marks as string,",
				"          subject_1_practical_marks as string,",
				"          subject_2_practical_marks as string,",
				"          subject_3_practical_marks as string,",
				"          subject_4_practical_marks as string,",
				"          subject_5_practical_marks as string,",
				"          subject_1_marks as string,",
				"          subject_2_marks as string,",
				"          subject_3_marks as string,",
				"          subject_4_marks as string,",
				"          subject_5_marks as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source3",
				"cast1 select(mapColumn(",
				"          SalesOrder,",
				"          CustomerName,",
				"          City,",
				"          Country,",
				"          Product,",
				"          OrderDate,",
				"          ShipDate,",
				"          Price,",
				"          QuantiySold = Qty_Sold,",
				"          QuantitySoldUOM = Qty_Sold_Units,",
				"          SalesAmount = Amount,",
				"          SalesAmountCURRENCY = Amount_Currency",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"source1 cast(output(",
				"          SalesOrder as string,",
				"          OrderDate as date 'dd-MM-yyyy',",
				"          CustomerName as string,",
				"          City as string,",
				"          Country as string,",
				"          Product as string,",
				"          Price as integer,",
				"          Qty_Sold as integer '000',",
				"          Qty_Sold_Units as string,",
				"          Amount as integer '000',",
				"          Amount_Currency as string,",
				"          ShipDate as date 'dd-MM-yyyy'",
				"     ),",
				"     errors: false) ~> cast1",
				"source2 select(mapColumn(",
				"          SalesOrder,",
				"          OrderDate,",
				"          Product,",
				"          CustomerName = sold_to_party.CustomerName,",
				"          each(sold_to_party.address,match(true())),",
				"          each(sales_amount,match(true())),",
				"          each(sales_amount,match(true())),",
				"          each(sales_quantities,match(true()))",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2 cast(output(",
				"          SalesOrder as string,",
				"          Amount as string",
				"     ),",
				"     errors: true) ~> cast2",
				"derivedColumn1 select(mapColumn(",
				"          school,",
				"          class,",
				"          {student id},",
				"          student_name,",
				"          each(match(right(name,6)=='_marks'),",
				"               /* toString(keyValues(['subject_1_written_marks','subject_2_written_marks'],['english_written_test_marks','telugu_written_test_marks'])['subject_1_written_marks']) */keyValues(['subject_1_written_marks','subject_2_written_marks','subject_3_written_marks','subject_4_written_marks','subject_5_written_marks','subject_1_practical_marks','subject_2_practical_marks','subject_3_practical_marks','subject_4_practical_marks','subject_5_practical_marks','subject_1_marks','subject_2_marks','subject_3_marks','subject_4_marks','subject_5_marks'],['english_written_test_marks','telugu_written_test_marks','math_written_test_marks','science_written_test_marks','social_written_test_marks','english_practical_test_marks','telugu_practical_test_marks','math_practical_test_marks','science_practical_test_marks','social_practical_test_marks','english_marks','telugu_marks','math_marks','science_marks','social_marks'])[$0]/* $0+'-'+toString(sinkCacheColumnNames#lookup('subject_1_written_marks').target_column_name) */ = $$)",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"source3 derive(each(match(right(name,6)=='_marks'), $$+'_header' = toString(sinkCacheColumnNames#lookup($0).target_column_name))) ~> derivedColumn1",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          COUNTRY as string,",
				"          {COUNTRY CODE} as string,",
				"          {ISO CODES} as string,",
				"          POPULATION as string,",
				"          {AREA KM2} as string,",
				"          GDP_USD as string",
				"     ),",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1",
				"cast2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          COUNTRY as string,",
				"          {COUNTRY CODE} as string,",
				"          {ISO CODES} as string,",
				"          POPULATION as string,",
				"          {AREA KM2} as string,",
				"          GDP_USD as string",
				"     ),",
				"     partitionFileNames:['select_2.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink2",
				"select3 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          COUNTRY as string,",
				"          {COUNTRY CODE} as string,",
				"          {ISO CODES} as string,",
				"          POPULATION as string,",
				"          {AREA KM2} as string,",
				"          GDP_USD as string",
				"     ),",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink3"
			]
		}
	}
}