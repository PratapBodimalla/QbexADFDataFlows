{
	"name": "dflow_window_001",
	"properties": {
		"folder": {
			"name": "Window"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_student_marks",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_adls_folder",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "ds_adls_folder",
						"type": "DatasetReference"
					},
					"name": "sink2"
				},
				{
					"dataset": {
						"referenceName": "ds_adls_folder",
						"type": "DatasetReference"
					},
					"name": "sink3"
				}
			],
			"transformations": [
				{
					"name": "windowRank"
				},
				{
					"name": "windowLag"
				},
				{
					"name": "windowCum"
				}
			],
			"scriptLines": [
				"source(output(",
				"          school as string,",
				"          class as short,",
				"          {student id} as short,",
				"          student_name as string,",
				"          {subject-1-marks} as short,",
				"          {subject-2-marks} as short,",
				"          {subject-3-marks} as short,",
				"          {subject-4-marks} as short,",
				"          {subject-5-marks} as short,",
				"          {total-marks} as short",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source1 window(over(school,",
				"          class),",
				"     desc({total-marks}, false),",
				"     rank_window = denseRank()) ~> windowRank",
				"source1 window(over(school,",
				"          class),",
				"     asc(class, true),",
				"     column1 = lag(class)) ~> windowLag",
				"source1 window(over(school,",
				"          class),",
				"     asc(school, true),",
				"     asc(class, true),",
				"     startRowOffset: -10L,",
				"     endRowOffset: 0L,",
				"     {total-marks_cum} = sum({total-marks}),",
				"     rangeSpecified: true) ~> windowCum",
				"windowRank sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          COUNTRY as string,",
				"          {COUNTRY CODE} as string,",
				"          {ISO CODES} as string,",
				"          POPULATION as string,",
				"          {AREA KM2} as string,",
				"          GDP_USD as string",
				"     ),",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1",
				"windowLag sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          COUNTRY as string,",
				"          {COUNTRY CODE} as string,",
				"          {ISO CODES} as string,",
				"          POPULATION as string,",
				"          {AREA KM2} as string,",
				"          GDP_USD as string",
				"     ),",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink2",
				"windowCum sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          COUNTRY as string,",
				"          {COUNTRY CODE} as string,",
				"          {ISO CODES} as string,",
				"          POPULATION as string,",
				"          {AREA KM2} as string,",
				"          GDP_USD as string",
				"     ),",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink3"
			]
		}
	}
}